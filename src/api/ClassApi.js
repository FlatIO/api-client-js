/**
 * Flat API
 * The Flat API allows you to easily extend the abilities of the [Flat Platform](https://flat.io), with a wide range of use cases including the following:  * Creating and importing new music scores using MusicXML or MIDI files * Browsing, updating, copying, exporting the user's scores (for example in MP3, WAV or MIDI) * Managing educational resources with Flat for Education: creating & updating the organization accounts, the classes, rosters and assignments.  The Flat API is built on HTTP. Our API is RESTful It has predictable resource URLs. It returns HTTP response codes to indicate errors. It also accepts and returns JSON in the HTTP body. The [schema](/swagger.yaml) of this API follows the [OpenAPI Initiative (OAI) specification](https://www.openapis.org/), you can use and work with [compatible Swagger tools](http://swagger.io/open-source-integrations/). This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/).  You can use your favorite HTTP/REST library for your programming language to use Flat's API. This specification and reference is [available on Github](https://github.com/FlatIO/api-reference).  Getting Started and learn more:  * [API Overview and interoduction](https://flat.io/developers/docs/api/) * [Authentication (Personal Access Tokens or OAuth2)](https://flat.io/developers/docs/api/authentication.html) * [SDKs](https://flat.io/developers/docs/api/sdks.html) * [Rate Limits](https://flat.io/developers/docs/api/rate-limits.html) * [Changelog](https://flat.io/developers/docs/api/changelog.html) 
 *
 * OpenAPI spec version: 2.2.0
 * Contact: developers@flat.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Assignment', 'model/AssignmentCopy', 'model/AssignmentCreation', 'model/AssignmentSubmission', 'model/AssignmentSubmissionUpdate', 'model/ClassCreation', 'model/ClassDetails', 'model/ClassUpdate', 'model/FlatErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Assignment'), require('../model/AssignmentCopy'), require('../model/AssignmentCreation'), require('../model/AssignmentSubmission'), require('../model/AssignmentSubmissionUpdate'), require('../model/ClassCreation'), require('../model/ClassDetails'), require('../model/ClassUpdate'), require('../model/FlatErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.FlatApi) {
      root.FlatApi = {};
    }
    root.FlatApi.ClassApi = factory(root.FlatApi.ApiClient, root.FlatApi.Assignment, root.FlatApi.AssignmentCopy, root.FlatApi.AssignmentCreation, root.FlatApi.AssignmentSubmission, root.FlatApi.AssignmentSubmissionUpdate, root.FlatApi.ClassCreation, root.FlatApi.ClassDetails, root.FlatApi.ClassUpdate, root.FlatApi.FlatErrorResponse);
  }
}(this, function(ApiClient, Assignment, AssignmentCopy, AssignmentCreation, AssignmentSubmission, AssignmentSubmissionUpdate, ClassCreation, ClassDetails, ClassUpdate, FlatErrorResponse) {
  'use strict';

  /**
   * Class service.
   * @module api/ClassApi
   * @version 2.2.0
   */

  /**
   * Constructs a new ClassApi. 
   * @alias module:api/ClassApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateClass operation.
     * @callback module:api/ClassApi~activateClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate the class
     * Mark the class as &#x60;active&#x60;. This is mainly used for classes synchronized from Clever that are initially with an &#x60;inactive&#x60; state and hidden in the UI. 
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~activateClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.activateClass = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling activateClass");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes/{class}/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addClassUser operation.
     * @callback module:api/ClassApi~addClassUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to the class
     * This method can be used by a teacher of the class to enroll another Flat user into the class.  Only users that are part of your Organization can be enrolled in a class of this same Organization.  When enrolling a user in the class, Flat will automatically add this user to the corresponding Class group, based on this role in the Organization. 
     * @param {String} _class Unique identifier of the class
     * @param {String} user Unique identifier of the user
     * @param {module:api/ClassApi~addClassUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addClassUser = function(_class, user, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling addClassUser");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling addClassUser");
      }


      var pathParams = {
        'class': _class,
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/classes/{class}/users/{user}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveClass operation.
     * @callback module:api/ClassApi~archiveClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive the class
     * Mark the class as &#x60;archived&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~archiveClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.archiveClass = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling archiveClass");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes/{class}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyAssignment operation.
     * @callback module:api/ClassApi~copyAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy an assignment
     * Copy an assignment to a specified class.  If the original assignment has a due date in the past, this new assingment will be created without a due date.  If the new class is synchronized with an external app (e.g. Google Classroom), the copied assignment will also be posted on the external app. 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:model/AssignmentCopy} body 
     * @param {module:api/ClassApi~copyAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assignment}
     */
    this.copyAssignment = function(_class, assignment, body, callback) {
      var postBody = body;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling copyAssignment");
      }

      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling copyAssignment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling copyAssignment");
      }


      var pathParams = {
        'class': _class,
        'assignment': assignment
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Assignment;

      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssignment operation.
     * @callback module:api/ClassApi~createAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assignment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assignment creation
     * Use this method as a teacher to create and post a new assignment to a class.  If the class is synchronized with Google Classroom, the assignment will be automatically posted to your Classroom course. 
     * @param {String} _class Unique identifier of the class
     * @param {Object} opts Optional parameters
     * @param {module:model/AssignmentCreation} opts.body 
     * @param {module:api/ClassApi~createAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assignment}
     */
    this.createAssignment = function(_class, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling createAssignment");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Assignment;

      return this.apiClient.callApi(
        '/classes/{class}/assignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createClass operation.
     * @callback module:api/ClassApi~createClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new class
     * Classrooms on Flat allow you to create activities with assignments and post content to a specific group.  When creating a class, Flat automatically creates two groups: one for the teachers of the course, one for the students. The creator of this class is automatically added to the teachers group.  If the classsroom is synchronized with another application like Google Classroom, some of the meta information will automatically be updated.  You can add users to this class using &#x60;POST /classes/{class}/users/{user}&#x60;, they will automatically added to the group based on their role on Flat. Users can also enroll themselves to this class using &#x60;POST /classes/enroll/{enrollmentCode}&#x60; and the &#x60;enrollmentCode&#x60; returned in the &#x60;ClassDetails&#x60; response. 
     * @param {module:model/ClassCreation} body 
     * @param {module:api/ClassApi~createClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.createClass = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createClass");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSubmission operation.
     * @callback module:api/ClassApi~createSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or edit a submission
     * Use this method as a student to create, update and submit a submission related to an assignment. Students can only set &#x60;attachments&#x60;, &#x60;studentComment&#x60; and &#x60;submit&#x60;.  Teachers can use &#x60;PUT /classes/{class}/assignments/{assignment}/submissions/{submission}&#x60; to update a submission by id. 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:model/AssignmentSubmissionUpdate} body 
     * @param {module:api/ClassApi~createSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmission}
     */
    this.createSubmission = function(_class, assignment, body, callback) {
      var postBody = body;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling createSubmission");
      }

      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling createSubmission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createSubmission");
      }


      var pathParams = {
        'class': _class,
        'assignment': assignment
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssignmentSubmission;

      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteClassUser operation.
     * @callback module:api/ClassApi~deleteClassUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user from the class
     * This method can be used by a teacher to remove a user from the class, or by a student to leave the classroom.  Warning: Removing a user from the class will remove the associated resources, including the submissions and feedback related to these submissions. 
     * @param {String} _class Unique identifier of the class
     * @param {String} user Unique identifier of the user
     * @param {module:api/ClassApi~deleteClassUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteClassUser = function(_class, user, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling deleteClassUser");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling deleteClassUser");
      }


      var pathParams = {
        'class': _class,
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/classes/{class}/users/{user}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editSubmission operation.
     * @callback module:api/ClassApi~editSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit a submission
     * Use this method as a teacher to update the different submission and give feedback. Teachers can only set &#x60;returnFeedback&#x60; 
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:model/AssignmentSubmissionUpdate} body 
     * @param {module:api/ClassApi~editSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmission}
     */
    this.editSubmission = function(_class, assignment, submission, body, callback) {
      var postBody = body;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling editSubmission");
      }

      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling editSubmission");
      }

      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling editSubmission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling editSubmission");
      }


      var pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssignmentSubmission;

      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enrollClass operation.
     * @callback module:api/ClassApi~enrollClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join a class
     * Use this method to join a class using an enrollment code given one of the teacher of this class. This code is also available in the &#x60;ClassDetails&#x60; returned to the teachers when creating the class or listing / fetching a specific class.  Flat will automatically add the user to the corresponding class group based on this role in the organization. 
     * @param {String} enrollmentCode The enrollment code, available to the teacher in &#x60;ClassDetails&#x60; 
     * @param {module:api/ClassApi~enrollClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.enrollClass = function(enrollmentCode, callback) {
      var postBody = null;

      // verify the required parameter 'enrollmentCode' is set
      if (enrollmentCode === undefined || enrollmentCode === null) {
        throw new Error("Missing the required parameter 'enrollmentCode' when calling enrollClass");
      }


      var pathParams = {
        'enrollmentCode': enrollmentCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes/enroll/{enrollmentCode}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClass operation.
     * @callback module:api/ClassApi~getClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of a single class
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~getClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.getClass = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getClass");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes/{class}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScoreSubmissions operation.
     * @callback module:api/ClassApi~getScoreSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List submissions related to the score
     * This API call will list the different assignments submissions where the score is attached. This method can be used by anyone that are part of the organization and have at least read access to the document. 
     * @param {String} score Unique identifier of the score document. This can be a Flat Score unique identifier (i.e. &#x60;ScoreDetails.id&#x60;) or, if the score is also a Google Drive file, the Drive file unique identifier prefixed with &#x60;drive-&#x60; (e.g. &#x60;drive-0B000000000&#x60;). 
     * @param {module:api/ClassApi~getScoreSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    this.getScoreSubmissions = function(score, callback) {
      var postBody = null;

      // verify the required parameter 'score' is set
      if (score === undefined || score === null) {
        throw new Error("Missing the required parameter 'score' when calling getScoreSubmissions");
      }


      var pathParams = {
        'score': score
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssignmentSubmission];

      return this.apiClient.callApi(
        '/scores/{score}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmission operation.
     * @callback module:api/ClassApi~getSubmissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssignmentSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a student submission
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {String} submission Unique identifier of the submission
     * @param {module:api/ClassApi~getSubmissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssignmentSubmission}
     */
    this.getSubmission = function(_class, assignment, submission, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getSubmission");
      }

      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling getSubmission");
      }

      // verify the required parameter 'submission' is set
      if (submission === undefined || submission === null) {
        throw new Error("Missing the required parameter 'submission' when calling getSubmission");
      }


      var pathParams = {
        'class': _class,
        'assignment': assignment,
        'submission': submission
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AssignmentSubmission;

      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions/{submission}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSubmissions operation.
     * @callback module:api/ClassApi~getSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the students&#39; submissions
     * @param {String} _class Unique identifier of the class
     * @param {String} assignment Unique identifier of the assignment
     * @param {module:api/ClassApi~getSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    this.getSubmissions = function(_class, assignment, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getSubmissions");
      }

      // verify the required parameter 'assignment' is set
      if (assignment === undefined || assignment === null) {
        throw new Error("Missing the required parameter 'assignment' when calling getSubmissions");
      }


      var pathParams = {
        'class': _class,
        'assignment': assignment
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssignmentSubmission];

      return this.apiClient.callApi(
        '/classes/{class}/assignments/{assignment}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssignments operation.
     * @callback module:api/ClassApi~listAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Assignment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assignments listing
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~listAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Assignment>}
     */
    this.listAssignments = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling listAssignments");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Assignment];

      return this.apiClient.callApi(
        '/classes/{class}/assignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listClassStudentSubmissions operation.
     * @callback module:api/ClassApi~listClassStudentSubmissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AssignmentSubmission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the submissions for a student
     * Use this method as a teacher to list all the assignment submissions sent by a student of the class 
     * @param {String} _class Unique identifier of the class
     * @param {String} user Unique identifier of the user
     * @param {module:api/ClassApi~listClassStudentSubmissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AssignmentSubmission>}
     */
    this.listClassStudentSubmissions = function(_class, user, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling listClassStudentSubmissions");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling listClassStudentSubmissions");
      }


      var pathParams = {
        'class': _class,
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [AssignmentSubmission];

      return this.apiClient.callApi(
        '/classes/{class}/students/{user}/submissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listClasses operation.
     * @callback module:api/ClassApi~listClassesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ClassDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the classes available for the current user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.state Filter the classes by state (default to active)
     * @param {module:api/ClassApi~listClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ClassDetails>}
     */
    this.listClasses = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'state': opts['state']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ClassDetails];

      return this.apiClient.callApi(
        '/classes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchiveClass operation.
     * @callback module:api/ClassApi~unarchiveClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive the class
     * Mark the class as &#x60;active&#x60;. When this course is synchronized with another app, like Google Classroom, this state will be automatically be updated. 
     * @param {String} _class Unique identifier of the class
     * @param {module:api/ClassApi~unarchiveClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.unarchiveClass = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling unarchiveClass");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes/{class}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateClass operation.
     * @callback module:api/ClassApi~updateClassCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ClassDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the class
     * Update the meta information of the class 
     * @param {String} _class Unique identifier of the class
     * @param {Object} opts Optional parameters
     * @param {module:model/ClassUpdate} opts.body Details of the Class
     * @param {module:api/ClassApi~updateClassCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClassDetails}
     */
    this.updateClass = function(_class, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling updateClass");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ClassDetails;

      return this.apiClient.callApi(
        '/classes/{class}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
